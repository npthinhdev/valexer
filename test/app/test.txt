package main

import (
	"sort"
	"strings"
	"testing"
	"time"
)

func main() {
	matchAll := func(string, string) (bool, error) { return true, nil }
	tests := []testing.InternalTest{{F: TestSolution}}
	testing.Main(matchAll, tests, nil, nil)
}

func TestSolution(t *testing.T) {
	var testcase = []struct {
		name  string
		given string
		want  int
	}{
		{name: "TC1:", given: "Sun 10:00-20:00\nFri 05:00-10:00\nFri 16:30-23:50\nSat 10:00-24:00\nSun 01:00-04:00\nSat 02:00-06:00\nTue 03:30-18:15\nTue 19:00-20:00\nWed 04:25-15:14\nWed 15:14-22:40\nThu 00:00-23:59\nMon 05:00-13:00\nMon 15:00-21:00", want: 505},
		{name: "TC2:", given: "Mon 01:00-23:00\nTue 01:00-23:00\nWed 01:00-23:00\nThu 01:00-23:00\nFri 01:00-23:00\nSat 01:00-23:00\nSun 01:00-21:00", want: 180},
	}
	for _, tc := range testcase {
		t.Run(tc.name, func(t *testing.T) {
			got := Solution(tc.given)
			if got != tc.want {
				t.Errorf("Solution(%v) = %v, want %v", tc.given, got, tc.want)
			}
		})
	}
}

// Solution for business
func Solution(s string) int {
	arr := parsArr(s)
	sort.Ints(arr)

	max := arr[0]
	for idx := 1; idx < len(arr)-1; idx += 2 {
		delta := arr[idx+1] - arr[idx]
		if max < delta {
			max = delta
		}
	}
	delta := 10080 - arr[len(arr)-1]
	if max < delta {
		max = delta
	}

	return max
}

func parsArr(s string) []int {
	var arr []int
	pars := strings.Split(s, "\n")
	for _, value := range pars {
		sinceM, untilM := parsElm(value)
		arr = append(arr, sinceM, untilM)
	}
	return arr
}

func parsElm(a string) (sinceM, untilM int) {
	day := [7]string{"Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"}
	elm := strings.Split(a, " ")
	sElm := strings.Split(elm[1], "-")

	eDay := elm[0]
	pSince, _ := time.ParseDuration(strings.Replace(sElm[0], ":", "h", 1) + "m")
	pUntil, _ := time.ParseDuration(strings.Replace(sElm[1], ":", "h", 1) + "m")
	eSince := int(pSince.Minutes())
	eUntil := int(pUntil.Minutes())

	idx := 0
	for day[idx] != eDay {
		idx++
	}
	eSince += idx * 1440
	eUntil += idx * 1440

	return eSince, eUntil
}
