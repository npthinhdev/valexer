package main

import (
	"strings"
	"testing"
)

func main() {
	matchAll := func(string, string) (bool, error) { return true, nil }
	tests := []testing.InternalTest{{F: TestSolution}}
	testing.Main(matchAll, tests, nil, nil)
}

func TestSolution(t *testing.T) {
	var testcase = []struct {
		name, given, want string
	}{
		{name: "TC1:", given: "00-44 48 5555 8361", want: "004-448-555-583-61"},
		{name: "TC2:", given: "0 - 22 1985--324", want: "022-198-53-24"},
		{name: "TC3:", given: "555372654", want: "555-372-654"},
		{name: "TC4:", given: "1234", want: "12-34"},
		{name: "TC5:", given: "12", want: "12"},
	}
	for _, tc := range testcase {
		t.Run(tc.name, func(t *testing.T) {
			got := Solution(tc.given)
			if got != tc.want {
				t.Errorf("Solution(%v) = %v, want %v", tc.given, got, tc.want)
			}
		})
	}
}

// Solution for rephonenum
func Solution(s string) string {
	var result string
	s = strings.ReplaceAll(s, " ", "")
	s = strings.ReplaceAll(s, "-", "")
	lenNum := len(s)
	if lenNum%3 == 2 {
		result = addHead(s, lenNum-2)
		result += s[lenNum-2:]
	} else if lenNum%3 == 1 {
		result = addHead(s, lenNum-4)
		result += s[lenNum-4:lenNum-2] + "-" + s[lenNum-2:]
	} else {
		result = addHead(s, lenNum-3)
		result += s[lenNum-3:]
	}
	return result
}

func addHead(s string, n int) string {
	var result string
	for idx := 0; idx < n; idx += 3 {
		result += s[idx:idx+3] + "-"
	}
	return result
}
